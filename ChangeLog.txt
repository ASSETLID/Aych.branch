2011/05/03:
 * Lambda: add a boolean parameter to Psetfield, true for non-exported globals
 * Simplif: inline non-exported global functions only used once
 * Cmmgen: while true do ... done simplified to infinite loop
 * Matching: applied inplace-let patch of Alain Frisch, for testing. Extended
   to handle trywith constructs

2011/05/02:
 * Simplif: inlining of one-use functions extended to tupled functions

2011/05/01:
 * Rec2loop: approximate arguments to get rid of invariant arguments
   for self tailcall recursive functions
 * Simplif: cascading of simplifications when inlining one-use functions
 * Simplif: prevent inlining of non-total calls of one-use functions

2011/04/30:
 * Rec2loop: substitute bound variables to avoid duplicating
    identifiers, when several functions have been successfullly
    transformed in the same recursive definition
 * Rec2loop: fix the case where a tailcall to an external function
    would become non-tailcall because of the transformation (the
    problem is still present for tailcalls to internal functions)

2011/04/29:
 * Simplif: fixed a memory-leak by preventing inlining of alias variables
   under abstractions and loops
 * Simplif: allow inlining of functions used only once

2011/04/29:
 * Only perform rec2loop for functions that are escaping outside the
   recursion, but not within the recursion, to prevent stack overflows.
 * In case of success, generate code only for escaping functions.
 * Improved test_all.ml script with more options

2011/04/27:
 * Added the beginning of a simple testsuite in simple-tests/, to run using test_all.ml as a script
 * Fixed a problem where rec2loop would abort because a callee was merged but not removed.
 * Disabled rec2loop when -g is set

2011/04/26:
 * Implemented transformation of tailcall-recursive functions into loops at the lambda-code level
   * Debugged the simple case of one recursive functions
   * Still some problems with mutually recursive functions (Env.components_of_module)
   * No detection of invariant arguments
   * Slowdown noticed, because no other optimisation can really take benefit of this, right now

2011/04/22:
 * Added new module bytecomp/rectoloop.ml to implement transformation of recursive functions
   to loops in lambda code. Currently, the transformation is not yet done. Rectoloop.simplify
   is called by Simplif before doing let-simplification.
 * Added transformation of || and && into if-then-else to make recursive functions using them
   tailcall (see examples/00031_array_for_all)

2011/04/21:
 * Implemented total application of tuple functions receiving something else as argument (closure.ml)
 * Added mutable_flag to Const_block to allow approximation of blocks in closure.ml (lambda.ml)
 * Better approximation of constant blocks (closure.ml)
 * Better approximation of purity for primitives (closure.ml)
 * Removed the evaluation of arguments of inlined functions when they are useless and
    without effect (closure.ml)
 * See results in examples/00002

2011/03/01:
 * Implemented flattening of nested structures in Translmod.transl_store_structure

2010/11/29:
 * Implemented early emission of structured constants, so functions
 with such constants can still be inlined
 * Passed testsuite with same results as trunk

2010/11/29: created branch from trunk r10868


